// src/components/CompanyReport.tsx
import { motion } from 'framer-motion';
import { Pie } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  ArcElement,
  Title,
  Tooltip,
  Legend
} from 'chart.js';
import { 
  FaIndustry, 
  FaUsers, 
  FaBuilding, 
  FaCogs,   
  FaTshirt,
  FaWater,
  FaSun,
  FaClock,
  FaDollarSign,
  FaChartPie
} from 'react-icons/fa';
import { GiSewingMachine } from "react-icons/gi";
import { useEffect, useState } from 'react';

// Register ChartJS components
ChartJS.register(
  ArcElement,
  Title,
  Tooltip,
  Legend
);

// Icon mapping
const iconComponents: Record<string, JSX.Element> = {
  industry: <FaIndustry className="text-indigo-600" />,
  users: <FaUsers className="text-indigo-600" />,
  building: <FaBuilding className="text-indigo-600" />,
  cogs: <FaCogs className="text-indigo-600" />,
  tshirt: <FaTshirt className="text-indigo-600" />,
  sewing: <GiSewingMachine className="text-indigo-600" />,
  water: <FaWater className="text-indigo-600" />,
  sun: <FaSun className="text-indigo-600" />,
  clock: <FaClock className="text-indigo-600" />,
  dollar: <FaDollarSign className="text-indigo-600" />,
  chart: <FaChartPie className="text-indigo-600" />
};

interface CompanyData {
  title: {
    main: string;
    highlighted: string;
  };
  stats: {
    primary: Array<{ id: number; label: string; value: string; icon: string }>;
    secondary: Array<{ id: number; label: string; value: string; icon: string }>;
  };
  productionCapacity: {
    title: string;
    data: any;
    metrics: Array<{ label: string; value: string; icon: string }>;
  };
  units?: Array<{
    title: string;
    description: string;
    plants: Array<{
      name: string;
      shortDescription: string;
      images: string[];
      details: Record<string, any>;
    }>;
  }>;
  bankingPartners: {
    title: string;
    banks: string[];
    imagePath: string;
  };
  sisterConcerns: {
    title: string;
    concerns: Array<{ name: string; desc: string; icon: string }>;
  };
}

const CompanyReport = () => {
  const [companyData, setCompanyData] = useState<CompanyData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch('/companyReportData.json');
        if (!response.ok) {
          throw new Error('Failed to fetch data');
        }
        const data = await response.json();
        setCompanyData(data);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Unknown error occurred');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  // Animation variants
  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  };

  const item = {
    hidden: { opacity: 0, y: 20 },
    show: { opacity: 1, y: 0 }
  };

  if (loading) {
    return <div className="text-center py-20">Loading company data...</div>;
  }

  if (error) {
    return <div className="text-center py-20 text-red-500">Error: {error}</div>;
  }

  if (!companyData) {
    return <div className="text-center py-20">No data available</div>;
  }

  return (
    <section className="py-16 px-4 md:px-8 bg-gradient-to-br from-gray-50 to-indigo-50">
      <div className="max-w-7xl mx-auto">
        {/* Animated Title */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className="text-center mb-16"
        >
          <h2 className="text-4xl md:text-5xl font-bold text-gray-900 mb-4">
            {companyData.title.main.split(' ')[0]} <span className="text-indigo-600">{companyData.title.highlighted}</span> {companyData.title.main.split(' ').slice(2).join(' ')}
          </h2>
          <div className="w-24 h-1 bg-indigo-500 mx-auto"></div>
        </motion.div>

        {/* Manufacturing Stats and Pie Chart Row */}
        <div className="flex flex-col lg:flex-row gap-8 mb-20">
          {/* Left Column - Primary Stats */}
          <div className="lg:w-2/3">
            <motion.div
              variants={container}
              initial="hidden"
              whileInView="show"
              viewport={{ once: true }}
              className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-6"
            >
              {companyData.stats.primary.map((stat) => (
                <motion.div
                  key={stat.id}
                  variants={item}
                  whileHover={{ y: -5 }}
                  className="bg-white p-6 rounded-2xl shadow-lg border border-gray-100 hover:shadow-xl transition-all"
                >
                  <div className="text-4xl mb-3 flex justify-center">
                    {iconComponents[stat.icon]}
                  </div>
                  <div className="text-3xl font-bold text-indigo-600 mb-1 text-center">{stat.value}</div>
                  <div className="text-gray-700 font-medium text-center">{stat.label}</div>
                </motion.div>
              ))}
            </motion.div>

            {/* Secondary Stats */}
            <motion.div
              variants={container}
              initial="hidden"
              whileInView="show"
              viewport={{ once: true }}
              className="grid grid-cols-2 lg:grid-cols-4 gap-6"
            >
              {companyData.stats.secondary.map((stat) => (
                <motion.div
                  key={stat.id}
                  variants={item}
                  whileHover={{ y: -5 }}
                  className="bg-white p-4 rounded-2xl shadow-lg border border-gray-100 hover:shadow-xl transition-all"
                >
                  <div className="text-3xl mb-2 flex justify-center">
                    {iconComponents[stat.icon]}
                  </div>
                  <div className="text-2xl font-bold text-indigo-600 mb-1 text-center">{stat.value}</div>
                  <div className="text-gray-700 text-sm font-medium text-center">{stat.label}</div>
                </motion.div>
              ))}
            </motion.div>
          </div>

          {/* Right Column - Pie Chart */}
          <motion.div
            initial={{ opacity: 0 }}
            whileInView={{ opacity: 1 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
            className="lg:w-1/3 bg-white p-6 md:p-8 rounded-2xl shadow-lg flex flex-col"
          >
            <div className="flex items-center mb-6">
              <FaChartPie className="text-indigo-600 text-2xl mr-3" />
              <h3 className="text-2xl font-bold text-gray-800">{companyData.productionCapacity.title}</h3>
            </div>
            <div className="flex-1 min-h-[300px]">
              <Pie
                data={companyData.productionCapacity.data}
                options={{
                  responsive: true,
                  plugins: {
                    legend: {
                      position: 'right',
                    },
                    tooltip: {
                      callbacks: {
                        label: function(context) {
                          return `${context.label}: ${(context.raw as number).toLocaleString()} PCs`;
                        }
                      }
                    }
                  },
                  maintainAspectRatio: false
                }}
              />
            </div>
            {/* Additional metrics below pie chart */}
            <div className="mt-6 grid grid-cols-2 gap-4">
              {companyData.productionCapacity.metrics.map((metric, i) => (
                <div key={i} className="bg-indigo-50 p-4 rounded-lg flex items-center">
                  {iconComponents[metric.icon]}
                  <div className="ml-3">
                    <div className="text-indigo-600 font-bold text-sm">{metric.label}</div>
                    <div className="text-xl font-semibold">{metric.value}</div>
                  </div>
                </div>
              ))}
            </div>
          </motion.div>
        </div>

        {/* Manufacturing Units Section */}
        {companyData.units?.map((unitGroup, groupIndex) => (
          <div key={groupIndex} className="mb-20">
            <motion.div
              initial={{ opacity: 0 }}
              whileInView={{ opacity: 1 }}
              transition={{ duration: 0.6 }}
              viewport={{ once: true }}
              className="mb-8"
            >
              <h3 className="text-3xl font-bold text-gray-800 mb-4">{unitGroup.title}</h3>
              {/* <p className="text-gray-600 text-lg">{unitGroup.description}</p> */}
            </motion.div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {unitGroup.plants.map((plant, plantIndex) => (
                <motion.div
                  key={plantIndex}
                  variants={container}
                  initial="hidden"
                  whileInView="show"
                  viewport={{ once: true }}
                  className="bg-white rounded-2xl shadow-lg overflow-hidden"
                >
                  {/* {plant.images?.[0] && (
                    <div className="h-48 overflow-hidden">
                      <img 
                        src={plant.images[0]} 
                        alt={plant.name}
                        className="w-full h-full object-cover"
                      />
                    </div>
                  )} */}
                  <div className="p-6">
                    <h4 className="text-xl font-bold text-gray-800 mb-2">{plant.name}</h4>
                    {/* <p className="text-gray-600 mb-4">{plant.shortDescription}</p> */}
                    
                    <div className="space-y-3">
                      {Object.entries(plant.details).map(([key, value]) => {
                        if (typeof value === 'object') return null;
                        return (
                          <div key={key} className="flex justify-between border-b border-gray-100 pb-2">
                            <span className="text-gray-700 font-medium capitalize">{key.replace(/([A-Z])/g, ' $1').trim()}:</span>
                            <span className="text-gray-900">{String(value)}</span>
                          </div>
                        );
                      })}
                    </div>

                    {/* {plant.details.locationEmbed && (
                      <div className="mt-4">
                        <iframe
                          src={plant.details.locationEmbed}
                          width="100%"
                          height="200"
                          style={{ border: 0 }}
                          allowFullScreen
                          loading="lazy"
                          referrerPolicy="no-referrer-when-downgrade"
                        ></iframe>
                      </div>
                    )} */}
                  </div>
                </motion.div>
              ))}
            </div>
          </div>
        ))}

        {/* Financial & Sister Concerns */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
          {/* Financial Institutions */}
          <motion.div
            initial={{ opacity: 0, y: 50 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
            viewport={{ once: true }}
            className="bg-white p-6 md:p-8 rounded-2xl shadow-lg"
          >
            <h3 className="text-2xl font-bold text-gray-800 mb-6">{companyData.bankingPartners.title}</h3>

            {/* Bank List */}
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-6">
              {companyData.bankingPartners.banks.map((bank, i) => (
                <motion.div
                  key={i}
                  whileHover={{ scale: 1.03 }}
                  className="bg-indigo-50 p-4 rounded-xl flex items-center"
                >
                  <div className="w-10 h-10 rounded-full bg-indigo-100 flex items-center justify-center mr-4">
                    <span className="text-indigo-600 font-bold">{bank.charAt(0)}</span>
                  </div>
                  <span className="text-gray-800 font-medium">{bank}</span>
                </motion.div>
              ))}
            </div>

            {/* Bank Illustration or Logo Image */}
            <div className="mt-4">
              <img
                src={companyData.bankingPartners.imagePath}
                alt="Banking Illustration"
                className="w-full max-h-64 object-contain rounded-xl shadow-sm"
              />
            </div>
          </motion.div>

          {/* Sister Concerns */}
          <motion.div
            initial={{ opacity: 0, y: 50 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.2 }}
            viewport={{ once: true }}
            className="bg-white p-6 md:p-8 rounded-2xl shadow-lg"
          >
            <h3 className="text-2xl font-bold text-gray-800 mb-6">{companyData.sisterConcerns.title}</h3>
            <div className="space-y-4">
              {companyData.sisterConcerns.concerns.map((concern, i) => (
                <motion.div
                  key={i}
                  whileHover={{ x: 5 }}
                  className="flex items-start p-3 hover:bg-gray-50 rounded-lg transition-all"
                >
                  <span className="text-2xl mr-4 mt-1">{concern.icon}</span>
                  <div>
                    <h4 className="text-lg font-bold text-gray-800">{concern.name}</h4>
                    <p className="text-gray-600">{concern.desc}</p>
                  </div>
                </motion.div>
              ))}
            </div>
          </motion.div>
        </div>
      </div>
    </section>
  );
};

export default CompanyReport;